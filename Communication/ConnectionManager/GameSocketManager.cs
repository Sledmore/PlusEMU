using System;
using System.Collections.Concurrent;
using System.Net;
using System.Net.Sockets;
using log4net;
using Plus.Communication.ConnectionManager.Socket_Exceptions;

namespace Plus.Communication.ConnectionManager
{
    public class SocketManager
    {
        private static readonly ILog Log = LogManager.GetLogger("Plus.Communication.ConnectionManager");

        #region declares

        /// <summary>
        ///     This method is called if an connection event occurs
        /// </summary>
        /// <param name="connection">The new Game connection which was generated by the code</param>
        public delegate void ConnectionEvent(ConnectionInformation connection);

        /// <summary>
        ///     Indicates if connections should be accepted or not
        /// </summary>
        private bool _acceptConnections;

        /// <summary>
        ///     Indicates the amount of accepted connections.
        /// </summary>
        private int _acceptedConnections;

        /// <summary>
        ///     The Socket used for incoming data requests.
        /// </summary>
        private Socket _connectionListener;

        private bool _disableNagleAlgorithm;

        /// <summary>
        ///     Contains the max conenctions per ip count
        /// </summary>
        private int _maxIpConnectionCount;

        /// <summary>
        ///     The maximum amount of connections the server should be allowed to have
        /// </summary>
        private int _maximumConnections;

        private IDataParser _parser;

        /// <summary>
        ///     The port information, contains the nummeric value the socket should listen on.
        /// </summary>
        private int _portInformation;

        /// <summary>
        ///     Occurs when a new connection was established
        /// </summary>
        public event ConnectionEvent OnConnectionEvent;

        /// <summary>
        /// Contains the ip's and their connection counts
        /// </summary>
        //private Dictionary<string, int> ipConnectionCount;
        private ConcurrentDictionary<string, int> _ipConnectionsCount;
        #endregion

        #region initializer

        /// <summary>
        ///     Initializes the connection instance
        /// </summary>
        /// <param name="portId">The ID of the port this item should listen on</param>
        /// <param name="maxConnections">The maximum amount of connections</param>
        /// <param name="connectionsPerIp">The maximum allowed connections per IP Address</param>
        /// <param name="parser">The data parser for the connection</param>
        /// <param name="disableNaglesAlgorithm">Disable nagles algorithm</param>
        public void Init(int portId, int maxConnections, int connectionsPerIp, IDataParser parser,  bool disableNaglesAlgorithm)
        {
            _ipConnectionsCount = new ConcurrentDictionary<string, int>();

            _parser = parser;
            _disableNagleAlgorithm = disableNaglesAlgorithm;
            _maximumConnections = maxConnections;
            _portInformation = portId;
            _maxIpConnectionCount = connectionsPerIp;
            PrepareConnectionDetails();
            _acceptedConnections = 0;
            Log.Info("Successfully setup GameSocketManager on port (" + portId + ")!");
            Log.Info("Maximum connections per IP has been set to [" + connectionsPerIp + "]!");
        }

        /// <summary>
        ///     Prepares the socket for connections
        /// </summary>
        private void PrepareConnectionDetails()
        {
            _connectionListener = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp)
            {
                NoDelay = _disableNagleAlgorithm
            };

            try
            {
                _connectionListener.Bind(new IPEndPoint(IPAddress.Any, _portInformation));
            }
            catch (SocketException ex)
            {
                throw new SocketInitializationException(ex.Message);
            }
        }

        /// <summary>
        ///     Initializes the incoming data requests
        /// </summary>
        public void InitializeConnectionRequests()
        {
            //Out.writeLine("Starting to listen to connection requests", Out.logFlags.ImportantLogLevel);
            _connectionListener.Listen(100);
            _acceptConnections = true;

            try
            {
                _connectionListener.BeginAccept(NewConnectionRequest, _connectionListener);
            }
            catch
            {
                Destroy();
            }
        }

        #endregion

        #region destructor

        /// <summary>
        ///     Destroys the current connection manager and disconnects all users
        /// </summary>
        public void Destroy()
        {
            _acceptConnections = false;
            try { _connectionListener.Close(); }
            catch { } //ignored
            _connectionListener = null;
        }

        #endregion

        #region connection request

        /// <summary>
        ///     Handels a new incoming data request from some computer from arround the world
        /// </summary>
        /// <param name="iAr">the IAsyncResult of the connection</param>
        private void NewConnectionRequest(IAsyncResult iAr)
        {
            if (_connectionListener != null)
            {
                if (_acceptConnections)
                {
                    try
                    {
                        Socket replyFromComputer = ((Socket)iAr.AsyncState).EndAccept(iAr);
                        replyFromComputer.NoDelay = _disableNagleAlgorithm;

                        string ip = replyFromComputer.RemoteEndPoint.ToString().Split(':')[0];

                        int connectionCount = GetAmountOfConnectionFromIp(ip);
                        if (connectionCount < _maxIpConnectionCount)
                        {
                            _acceptedConnections++;
                            ConnectionInformation c = new ConnectionInformation(_acceptedConnections, replyFromComputer, _parser.Clone() as IDataParser, ip);
                            ReportUserLogin(ip);
                            c.ConnectionChanged += OnConnectionChanged;

                            /*if (OnConnectionEvent != null)
                                OnConnectionEvent(c);*/

                            OnConnectionEvent?.Invoke(c);
                        }
                        else
                        {
                            Log.Info("Connection denied from [" + replyFromComputer.RemoteEndPoint.ToString().Split(':')[0] + "]. Too many connections (" + connectionCount + ").");
                        }
                    }
                    catch { }
                    finally
                    {
                        _connectionListener.BeginAccept(NewConnectionRequest, _connectionListener);
                    }
                }
            }
        }

        private void OnConnectionChanged(ConnectionInformation information, ConnectionState state)
        {
            if (state == ConnectionState.Closed)
                ReportDisconnect(information);
        }

        #endregion

        #region connection disconnected

        /// <summary>
        ///     Reports a gameconnection as disconnected
        /// </summary>
        /// <param name="gameConnection">The connection which is logging out</param>
        public void ReportDisconnect(ConnectionInformation gameConnection)
        {
            gameConnection.ConnectionChanged -= OnConnectionChanged;
            ReportUserLogout(gameConnection.GetIp());
            //activeConnections.Remove(gameConnection.getConnectionID());
        }

        #endregion

        #region ip connection management

        /// <summary>
        ///     reports the user with an ip as "logged in"
        /// </summary>
        /// <param name="ip">The ip of the user</param>
        private void ReportUserLogin(string ip)
        {
            AlterIpConnectionCount(ip, (GetAmountOfConnectionFromIp(ip) + 1));
        }

        /// <summary>
        ///     reports the user with an ip as "logged out"
        /// </summary>
        /// <param name="ip">The ip of the user</param>
        private void ReportUserLogout(string ip)
        {
            AlterIpConnectionCount(ip, (GetAmountOfConnectionFromIp(ip) - 1));
        }

        /// <summary>
        ///     Alters the ip connection count
        /// </summary>
        /// <param name="ip">The ip of the user</param>
        /// <param name="amount">The amount of connections</param>
        private void AlterIpConnectionCount(string ip, int amount)
        {
            if (_ipConnectionsCount.ContainsKey(ip))
                _ipConnectionsCount.TryRemove(ip, out int _);

            _ipConnectionsCount.TryAdd(ip, amount);
        }

        /// <summary>
        ///     Gets the amount of connections from 1 ip
        /// </summary>
        /// <param name="ip">The ip of the user</param>
        /// <returns>The amount of connections from the given ip address</returns>
        private int GetAmountOfConnectionFromIp(string ip)
        {
            if (_ipConnectionsCount.ContainsKey(ip)) return _ipConnectionsCount[ip];

            return 0;
        }

        #endregion
    }
}